---
defaultBaseImageVersion: latest
properties:
- name: IBMCLOUD_TARGET_REGION
  value: ${BUILD_REGION_ID}
  type: text
- name: IBMCLOUD_TARGET_RESOURCE_GROUP
  value: ${BUILD_RESOURCE_GROUP}
  type: text
- name: BUILD_CLUSTER
  value: ${BUILD_CLUSTER_NAME}
  type: text
- name: BUILD_CLUSTER_NAMESPACE
  value: ${BUILD_CLUSTER_NAMESPACE}
  type: text
- name: IBM_CLOUD_API_KEY
  value: ${API_KEY}
  type: secure
- name: VAULT_INSTANCE
  value: ${VAULT_INSTANCE}
  type: text
stages:
- name: Create Signer Keys
  triggers:
  - type: stage
    enabled: false
  properties:
  - name: REGISTRY_REGION
    value: ${REGISTRY_REGION_ID}
    type: text
  - name: REGISTRY_NAMESPACE
    value: ${REGISTRY_NAMESPACE}
    type: text
  - name: IMAGE_NAME
    value: ${APP_NAME}
    type: text
  - name: DEVOPS_BUILD_SIGNER
    value: ${BUILD_SIGNER}
    type: text
  - name: DEVOPS_VALIDATION_SIGNER
    value: ${VALIDATION_SIGNER}
    type: text
  jobs:
  - name: Create Build Signer Keys
    type: builder
    curatedDockerImage: default
    build_type: customimage
    docker_image: jauninb/pbi-docker:latest
    script: |
      #!/bin/bash
      DEVOPS_SIGNER="$DEVOPS_BUILD_SIGNER"
      echo "Create  $DEVOPS_SIGNER singer key"
      export DOCKER_CONTENT_TRUST=1
      export IBMCLOUD_API_KEY=$IBM_CLOUD_API_KEY
      export IBMCLOUD_TARGET_REGION=${IBMCLOUD_TARGET_REGION:-"eu-gb"}

      # if target region is in the 'ibm:yp:<region>' just keep the region part
      REGION_SUBSET=$(echo "$IBMCLOUD_TARGET_REGION" | awk -F ':' '{print $3;}')
      if [[ -z "$REGION_SUBSET" ]]; then
        echo "IBM Cloud Target Region is $IBMCLOUD_TARGET_REGION"
      else
        export IBMCLOUD_TARGET_REGION=$REGION_SUBSET
        echo "IBM Cloud Target Region is $IBMCLOUD_TARGET_REGION. export IBMCLOUD_TARGET_REGION=$REGION_SUBSET done"
      fi

      ibmcloud login --apikey "$IBM_CLOUD_API_KEY" -r "$IBMCLOUD_TARGET_REGION"
      if [ -z "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE" ]; then
        export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(openssl rand -base64 16)
      fi

      # Create the new signer key
      docker trust key generate "$DEVOPS_SIGNER"

      # Restore root & repository keys
      if [ -z "$VAULT_INSTANCE" ]; then
        echo "Restoring keys from input's private_keys_backup.tar.gz file"
        tar xvzf private_keys_backup.tar.gz --directory ~
      else
        echo "Restoring keys from $VAULT_INSTANCE"
        source <(curl -sSL "https://raw.githubusercontent.com/huayuenh/jumpstart/test/signatures.sh")
        VAULT_DATA=$(buildVaultAccessDetailsJSON "$VAULT_INSTANCE" "$IBMCLOUD_TARGET_REGION" "$IBMCLOUD_TARGET_RESOURCE_GROUP")
        #write repo pem file to trust/private. Only repo key required to add delegate
        JSON_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA")"
        JSON_PUB_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.pub" "$VAULT_DATA")"

        # save the new signer pem key to the Vault
        deleteSecret "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA"
        deleteSecret "$REGISTRY_NAMESPACE.$IMAGE_NAME.pub" "$VAULT_DATA"

        JSON_DATA=$(addTrustFileToJSON "$DEVOPS_SIGNER" "$JSON_DATA" "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE")
        publicPem=$(base64TextEncode "./$DEVOPS_SIGNER.pub")
        data=$(addJSONEntry "$data" "name" "$DEVOPS_SIGNER.pub")
        data=$(addJSONEntry "$data" "value" "$publicPem")
        JSON_PUB_DATA=$(addJSONEntry "$JSON_PUB_DATA" "$DEVOPS_SIGNER" "$data")

        saveData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA" "$JSON_DATA"
        saveData "$REGISTRY_NAMESPACE.$IMAGE_NAME.pub" "$VAULT_DATA" "$JSON_PUB_DATA"
      fi
  - name: Create Validation Signer Keys
    type: builder
    curatedDockerImage: default
    build_type: customimage
    docker_image: jauninb/pbi-docker:latest
    script: |
      #!/bin/bash

      DEVOPS_SIGNER="$DEVOPS_VALIDATION_SIGNER"
      echo "Create  $DEVOPS_SIGNER key"
      export DOCKER_CONTENT_TRUST=1
      export IBMCLOUD_API_KEY=$IBM_CLOUD_API_KEY
      export IBMCLOUD_TARGET_REGION=${IBMCLOUD_TARGET_REGION:-"eu-gb"}

      # if target region is in the 'ibm:yp:<region>' just keep the region part
      REGION_SUBSET=$(echo "$IBMCLOUD_TARGET_REGION" | awk -F ':' '{print $3;}')
      if [[ -z "$REGION_SUBSET" ]]; then
        echo "IBM Cloud Target Region is $IBMCLOUD_TARGET_REGION"
      else
        export IBMCLOUD_TARGET_REGION=$REGION_SUBSET
        echo "IBM Cloud Target Region is $IBMCLOUD_TARGET_REGION. export IBMCLOUD_TARGET_REGION=$REGION_SUBSET done"
      fi
      ibmcloud login --apikey "$IBM_CLOUD_API_KEY" -r "$IBMCLOUD_TARGET_REGION"

      if [ -z "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE" ]; then
        export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(openssl rand -base64 16)
      fi
      
      # Create the new signer key
      docker trust key generate "$DEVOPS_SIGNER"

      # Restore  keys
      if [ -z "$VAULT_INSTANCE" ]; then
        echo "Restoring keys from input's private_keys_backup.tar.gz file"
        tar xvzf private_keys_backup.tar.gz --directory ~
      else
        echo "Restoring keys from $VAULT_INSTANCE"
        source <(curl -sSL "https://raw.githubusercontent.com/huayuenh/jumpstart/test/signatures.sh")
        VAULT_DATA=$(buildVaultAccessDetailsJSON "$VAULT_INSTANCE" "$IBMCLOUD_TARGET_REGION" "$IBMCLOUD_TARGET_RESOURCE_GROUP")
        #write repo pem file to trust/private
        JSON_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA")"
        JSON_PUB_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.pub" "$VAULT_DATA")"

        # save the new signer pem key to the Vault
        echo "Saving new signer key to $VAULT_INSTANCE"
        #save the new signer pem key to the Vault
       
        deleteSecret "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA"
        deleteSecret "$REGISTRY_NAMESPACE.$IMAGE_NAME.pub" "$VAULT_DATA"

        JSON_DATA=$(addTrustFileToJSON "$DEVOPS_SIGNER" "$JSON_DATA" "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE")
        publicPem=$(base64TextEncode "./$DEVOPS_SIGNER.pub")
        data=$(addJSONEntry "$data" "name" "$DEVOPS_SIGNER.pub")
        data=$(addJSONEntry "$data" "value" "$publicPem")
        JSON_PUB_DATA=$(addJSONEntry "$JSON_PUB_DATA" "$DEVOPS_SIGNER" "$data")

        saveData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA" "$JSON_DATA"
        saveData "$REGISTRY_NAMESPACE.$IMAGE_NAME.pub" "$VAULT_DATA" "$JSON_PUB_DATA"
      fi
- name: Init Docker Content Trust
  properties:
  - name: REGISTRY_REGION
    value: ${REGISTRY_REGION_ID}
    type: text
  - name: REGISTRY_NAMESPACE
    value: ${REGISTRY_NAMESPACE}
    type: text
  - name: IMAGE_NAME
    value: ${APP_NAME}
    type: text
  jobs:
  - name: Create DCT Keys
    type: builder
    curatedDockerImage: default
    artifact_dir: back-your-keys
    build_type: customimage
    docker_image: jauninb/pbi-docker:latest
    script: |
      #!/bin/bash

      # Get the notary binary
      curl -L https://github.com/theupdateframework/notary/releases/download/v0.6.1/notary-Linux-amd64 -o /usr/local/bin/notary
      # Make it executable
      chmod +x /usr/local/bin/notary

      export IBMCLOUD_API_KEY=$IBM_CLOUD_API_KEY
      export DOCKER_CONTENT_TRUST=1

      # Setup Docker-In-Docker
      source <(curl -s -S -L "https://raw.githubusercontent.com/jauninb/jumpstart/master/setup_dind.sh")

      # configure the container registry
      export REGISTRY_REGION=$(echo "$REGISTRY_REGION" | awk -F ':' '{print $NF;}')
      ibmcloud cr region-set $REGISTRY_REGION
      # login docker to ibm container registry
      ibmcloud cr login

      # check the existence of the container registry namespace
      REGISTRY_URL=$(ibmcloud cr info | grep -m1 -i '^Container Registry' | awk '{print $3;}')
      echo "Check for $REGISTRY_NAMESPACE existence"
      if ibmcloud cr namespaces | tail --lines=+4 | head --lines=-2 | grep "^$REGISTRY_NAMESPACE"; then
        echo "$REGISTRY_NAMESPACE exists in $REGISTRY_URL"
      else
        echo "Creating REGISTRY_NAMESPACE in $REGISTRY_URL"
        ibmcloud cr namespace-add $REGISTRY_NAMESPACE
      fi

      # Initialize the repository for Docker Content Trust
      # Generate passphrase for root and repository keys
      # see https://docs.docker.com/engine/security/trust/trust_key_mng/#choose-a-passphrase
      if [ -z "$DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE" ]; then
        export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=$(openssl rand -base64 16)
      fi
      if [ -z "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE" ]; then
        export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(openssl rand -base64 16)
      fi
      echo "Doing Docker Content Trust initialization for GUN $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
      source <(curl -s -S -L "https://raw.githubusercontent.com/jauninb/jumpstart/master/notary_init_gun.sh")

      if [ "$VAULT_INSTANCE" ]; then
        echo "Backing-up keys in $VAULT_INSTANCE"
        # jsonify the Vault access values
        source <(curl -sSL "https://raw.githubusercontent.com/huayuenh/jumpstart/test/signatures.sh")
        VAULT_DATA=$(buildVaultAccessDetailsJSON "$VAULT_INSTANCE" "$IBMCLOUD_TARGET_REGION" "$IBMCLOUD_TARGET_RESOURCE_GROUP")
        JSON_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA")"
        #save the root, repo pem key files to the Vault
        JSON_ROOT_DATA=$(addTrustFileToJSON "root" "$JSON_ROOT_DATA")
        JSON_ROOT_DATA=$(addJSONEntry "$JSON_ROOT_DATA" "DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE" "$DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE")
        JSON_DATA=$(addTrustFileToJSON "target" "$JSON_DATA" "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE")
        deleteSecret "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA"
        saveData "$REGISTRY_NAMESPACE.$IMAGE_NAME.rootkey" "$VAULT_DATA" "$JSON_ROOT_DATA"
        saveData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA" "$JSON_DATA"
      fi
      echo "GUN $GUN"
- name: Add Build Delegate
  inputs:
  - type: job
    stage: Init Docker Content Trust
    job: Create DCT Keys
  triggers:
  - type: stage
  properties:
  - name: DEVOPS_SIGNER
    value: ${BUILD_SIGNER}
    type: text
  - name: dct_properties
    value: dct.properties
    type: file
  jobs:
  - name: Add Build signer
    type: builder
    curatedDockerImage: default
    #artifact_dir: back-your-keys
    build_type: customimage
    docker_image: jauninb/pbi-docker:latest
    script: |
      #!/bin/bash
      echo "Create signer $DEVOPS_SIGNER for $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"

      export IBMCLOUD_API_KEY=$IBM_CLOUD_API_KEY
      export DOCKER_CONTENT_TRUST=1

      # Setup Docker-In-Docker
      source <(curl -s -S -L "https://raw.githubusercontent.com/jauninb/jumpstart/master/setup_dind.sh")

      # configure the container registry
      export REGISTRY_REGION=$(echo "$REGISTRY_REGION" | awk -F ':' '{print $NF;}')
      ibmcloud cr region-set $REGISTRY_REGION
      # login docker to ibm container registry
      ibmcloud cr login
      # Restore root & repository keys
      if [ -z "$VAULT_INSTANCE" ]; then
        echo "Restoring keys from input's private_keys_backup.tar.gz file"
        tar xvzf private_keys_backup.tar.gz --directory ~
        #create and add signer keys
        source <(curl -s -S -L "https://raw.githubusercontent.com/huayuenh/jumpstart/test/create_dct_signer_key.sh")
      else
        echo "Restoring keys from $VAULT_INSTANCE"
        source <(curl -sSL "https://raw.githubusercontent.com/huayuenh/jumpstart/test/signatures.sh")
        VAULT_DATA=$(buildVaultAccessDetailsJSON "$VAULT_INSTANCE" "$IBMCLOUD_TARGET_REGION" "$IBMCLOUD_TARGET_RESOURCE_GROUP")
        #write repo pem file to trust/private. Only repo key required to add delegate
        export CURRENT_PATH=$(pwd)
        JSON_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA")"
        repokey=$(getJSONValue "target" "$JSON_DATA")
        echo "*****PRINTING REPO KEY DATA"
        echo "$JSON_DATA"
        writeFile "$repokey"
        PUBLIC_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.pub" "$VAULT_DATA")"
        publickey=$(getJSONValue "$DEVOPS_SIGNER" "$PUBLIC_DATA")
        echo "*****PRINTING PUBLIC KEY DATA"
        echo "$PUBLIC_DATA"
        writeFile "$publickey" "$CURRENT_PATH"
        export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(getJSONValue "passphrase" "$repokey")
        docker trust signer add --key "${DEVOPS_SIGNER}.pub" "$DEVOPS_SIGNER" "$GUN"
        docker trust inspect --pretty $GUN
        source <(curl -sSL "https://raw.githubusercontent.com/huayuenh/jumpstart/test/testrun.sh")
      fi
      echo "GUN $GUN"
- name: Add Validation Delegate
  inputs:
  - type: job
    stage: Add Build Delegate
    job: Add Build signer
  triggers:
  - type: stage
  properties:
  - name: DEVOPS_SIGNER
    value: ${VALIDATION_SIGNER}
    type: text
  - name: dct_properties
    value: dct.properties
    type: file
  jobs:
  - name: Add Validation Signer Key
    type: builder
    curatedDockerImage: default
    #artifact_dir: back-your-keys
    build_type: customimage
    docker_image: jauninb/pbi-docker:latest
    script: |
      #!/bin/bash
      echo "Create signer $DEVOPS_SIGNER for $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"

      export IBMCLOUD_API_KEY=$IBM_CLOUD_API_KEY
      export DOCKER_CONTENT_TRUST=1

      # Setup Docker-In-Docker
      source <(curl -s -S -L "https://raw.githubusercontent.com/jauninb/jumpstart/master/setup_dind.sh")

      # configure the container registry
      export REGISTRY_REGION=$(echo "$REGISTRY_REGION" | awk -F ':' '{print $NF;}')
      ibmcloud cr region-set $REGISTRY_REGION
      # login docker to ibm container registry
      ibmcloud cr login
      # Restore root & repository keys
      if [ -z "$VAULT_INSTANCE" ]; then
        echo "Restoring keys from input's private_keys_backup.tar.gz file"
        tar xvzf private_keys_backup.tar.gz --directory ~
        #create and add signer keys
        source <(curl -s -S -L "https://raw.githubusercontent.com/huayuenh/jumpstart/test/create_dct_signer_key.sh")
      else
        echo "Restoring keys from $VAULT_INSTANCE"
        source <(curl -sSL "https://raw.githubusercontent.com/huayuenh/jumpstart/test/signatures.sh")
        VAULT_DATA=$(buildVaultAccessDetailsJSON "$VAULT_INSTANCE" "$IBMCLOUD_TARGET_REGION" "$IBMCLOUD_TARGET_RESOURCE_GROUP")
        #write repo pem file to trust/private. Only repo key required to add delegate
        export CURRENT_PATH=$(pwd)
        JSON_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA")"
        repokey=$(getJSONValue "target" "$JSON_DATA")
        echo "*****PRINTING REPO KEY DATA"
        echo "$JSON_DATA"
        writeFile "$repokey"
        PUBLIC_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.pub" "$VAULT_DATA")"
        publickey=$(getJSONValue "$DEVOPS_SIGNER" "$PUBLIC_DATA")
        echo "*****PRINTING PUBLIC KEY DATA"
        echo "$PUBLIC_DATA"
        writeFile "$publickey" "$CURRENT_PATH"
        export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(getJSONValue "passphrase" "$repokey")
        docker trust signer add --key "${DEVOPS_SIGNER}.pub" "$DEVOPS_SIGNER" "$GUN"
        docker trust inspect --pretty $GUN
        source <(curl -sSL "https://raw.githubusercontent.com/huayuenh/jumpstart/test/testrun.sh")
      fi
      echo "GUN $GUN"
- name: Create K8S secrets for image signing (optional)
  inputs:
  - type: job
    stage: Add Validation Delegate
    job: Add Validation Signer Key
  triggers:
  - type: stage
  properties:
  - name: dct_properties
    value: dct.properties
    type: file
  jobs:
  - name: Create Secrets
    type: deployer
    curatedDockerImage: default
    deploy_type: kubernetes
    target:
      region_id: ${BUILD_REGION_ID}
      api_key: ${API_KEY}
      resource_group: ${BUILD_RESOURCE_GROUP}
      kubernetes_cluster: ${BUILD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      #set -x
      if [ -z "$VAULT_INSTANCE" ]; then
        echo "Creating K8S secrets containing signing information in $BUILD_CLUSTER_NAMESPACE"
        tar xvzf private_keys_backup.tar.gz
        echo "Checking cluster namespace $BUILD_CLUSTER_NAMESPACE"
        if ! kubectl get namespace "$BUILD_CLUSTER_NAMESPACE"; then
          kubectl create namespace "$BUILD_CLUSTER_NAMESPACE"
        fi
        # Iterate on the signers for the $GUN
        for signer_and_key in $(cat dct_signers.json | jq -r -c '.[] | {name:.Name, key: .Keys[0].ID}'); do
          DEVOPS_SIGNER=$(echo $signer_and_key | jq -r '.name')
          DEVOPS_SIGNER_KEY=$(echo $signer_and_key | jq -r '.key')
          echo "Creating K8S secret for build signed image for $DEVOPS_SIGNER using ${DEVOPS_SIGNER_KEY}.key"
          export PEM_FILE_NAME="${DEVOPS_SIGNER_KEY}.key"
          export PEM_FILE_CONTENT_BASE64=$(cat .docker/trust/private/$PEM_FILE_NAME | base64 -w0)
          if [ -z "$PEM_FILE_CONTENT_BASE64" ]; then
            echo "Not able to create DCT information for $GUN"
            exit 1
          else
            # ensure the secret is not already existing
            kubectl delete secret "$REGISTRY_NAMESPACE.$IMAGE_NAME.$DEVOPS_SIGNER" \
            -n$BUILD_CLUSTER_NAMESPACE \
            --ignore-not-found=true
          fi
          # Store the GUN to a specific secret
          kubectl create secret generic "$REGISTRY_NAMESPACE.$IMAGE_NAME.$DEVOPS_SIGNER" \
          -n$BUILD_CLUSTER_NAMESPACE \
          --from-literal=DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE" \
          --from-literal=DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE="$DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE" \
          --from-literal=PEM_FILE_NAME="$PEM_FILE_NAME" \
          --from-literal=PEM_FILE_CONTENT_BASE64="$PEM_FILE_CONTENT_BASE64"
        done
      else
        echo "No-op - Vault instance $VAULT_INSTANCE contains signing keys"
      fi
      echo "GUN $GUN"
- name: Setup IKS Runtime enforcement in deployment cluster
  inputs:
  - type: job
    stage: Add Validation Delegate
    job: Add Validation Signer Key
  triggers:
  - type: stage
    enabled: false
  properties:
  - name: DEFAULT_HELM_VERSION
    value: 2.13.1
    type: text
  - name: dct_properties
    value: dct.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  jobs:
  - name: Create CISE CRD and Secret
    type: deployer
    curatedDockerImage: default
    deploy_type: kubernetes
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      resource_group: ${PROD_RESOURCE_GROUP}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      #set -x

      source <(curl -s -S -L "https://raw.githubusercontent.com/jauninb/jumpstart/master/check_helm_up_and_running.sh")

      # Install CISE
      if helm list cise | grep '^cise'; then
        echo "Container Image Security Enforcement is already installed"
      else
        helm repo add iks-charts https://icr.io/helm/iks-charts
        helm install --name cise iks-charts/ibmcloud-image-enforcement
      fi

      # Ensure deployment namespace is created
      echo "Checking cluster namespace $CLUSTER_NAMESPACE"
      if ! kubectl get namespace "$CLUSTER_NAMESPACE"; then
        kubectl create namespace "$CLUSTER_NAMESPACE"
      fi

      # Define custom user policies
      echo "Create CISE custom policies"
      for signer_and_key in $(cat dct_signers.json | jq -r -c '.[] | {name:.Name, key: .Keys[0].ID}'); do
        DEVOPS_SIGNER=$(echo $signer_and_key | jq -r '.name')
        DEVOPS_SIGNER_PRIVATE_KEY=$(echo $signer_and_key | jq -r '.key')

        source <(curl -s -S -L "https://raw.githubusercontent.com/jauninb/jumpstart/master/create_cise_crd.sh")
        createCISE_CRD | tee cise_crd_custom_policy.yaml

        echo " "
        echo "Applying CISE custom policy to $CLUSTER_NAMESPACE"
        kubectl apply -f cise_crd_custom_policy.yaml -n$CLUSTER_NAMESPACE

        echo "Creating Secret $REGISTRY_NAMESPACE.$IMAGE_NAME.$DEVOPS_SIGNER to provide public key"
        # ensure the secret is not already existing
        kubectl delete secret "$REGISTRY_NAMESPACE.$IMAGE_NAME.$DEVOPS_SIGNER" -n$CLUSTER_NAMESPACE \
          --ignore-not-found=true
        kubectl create secret generic "$REGISTRY_NAMESPACE.$IMAGE_NAME.$DEVOPS_SIGNER" -n$CLUSTER_NAMESPACE \
          --from-literal=name=$DEVOPS_SIGNER \
          --from-file=publicKey=$DEVOPS_SIGNER.pub
      done